{"version":3,"sources":["components/TextEditor.jsx","App.jsx","index.js"],"names":["toolbarOptions","header","size","list","direction","color","background","font","align","TextEditor","useState","quill","setQuill","socket","setSocket","wrapper","useRef","documentId","useParams","id","sendUserChangesToServer","delta","oldDelta","source","emit","updateEditor","updateContents","loadDocumentFromUser","document","setContents","enable","useEffect","editor","createElement","current","append","q","Quill","theme","modules","toolbar","disable","setText","sock","io","innerHTML","disconnect","on","off","once","interval","setInterval","data","getContents","clearInterval","className","ref","App","path","exact","to","uuid","ReactDOM","render","StrictMode","getElementById"],"mappings":"yOAOMA,EAAiB,CACrB,CAAC,CAAEC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAG,KAC9B,CAAC,CAAEC,KAAM,CAAC,SAAS,EAAO,QAAS,UAEnC,CAAC,OAAQ,SAAU,YAAa,UAChC,CAAC,CAAEC,KAAM,WAAa,CAAEA,KAAM,WAC9B,CAAC,CAAEC,UAAW,QAEd,CAAC,CAAEC,MAAO,IAAM,CAAEC,WAAY,KAC9B,CAAC,CAAEC,KAAM,KACT,CAAC,CAAEC,MAAO,KAEV,CAAC,QAAS,aAAc,cACxB,CAAC,UAuHYC,EApHI,WACjB,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,MAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAUC,mBAEJC,EAAeC,cAAnBC,GAKFC,EAA0B,SAACC,EAAOC,EAAUC,GAMjC,QAAXA,GAGJV,EAAOW,KAAK,cAAeH,IAIvBI,EAAe,SAAAJ,GACnBV,EAAMe,eAAeL,IAGjBM,EAAuB,SAAAC,GAC3BjB,EAAMkB,YAAYD,GAClBjB,EAAMmB,UAoFR,OAhFAC,qBAAU,WAER,IAAMC,EAASJ,SAASK,cAAc,OACtClB,EAAQmB,QAAQC,OAAOH,GAEvB,IAAMI,EAAI,IAAIC,IAAML,EAAQ,CAC1BM,MAAO,OACPC,QAAS,CACPC,QAASxC,KAIboC,EAAEK,UAEFL,EAAEM,QAAQ,uBAEV9B,EAASwB,GAIT,IAAMO,EAAOC,aAAG,+CAKhB,OAHA9B,EAAU6B,GAGH,WAEL5B,EAAQmB,QAAQW,UAAY,GAE5BF,EAAKG,gBAEN,IAEHf,qBACE,WAEE,GAAc,OAAVpB,GAA6B,OAAXE,EAStB,OANAF,EAAMoC,GAAG,cAAe3B,GAGxBP,EAAOkC,GAAG,kBAAmBtB,GAGtB,WACLd,EAAMqC,IAAI,cAAe5B,GACzBP,EAAOmC,IAAI,kBAAmBvB,MAIlC,CAACZ,EAAQF,IAGXoB,qBAAU,WAEO,OAAXlB,GAA6B,OAAVF,IAGvBE,EAAOW,KAAK,eAAgBP,GAI5BJ,EAAOoC,KAAK,gBAAiBtB,MAC5B,CAACd,EAAQF,EAAOM,IAGnBc,qBAAU,WACR,IAAImB,EAAWC,aAAY,WACzBtC,EAAOW,KAAK,gBAAiB,CAC3B4B,KAAMzC,EAAM0C,cACZpC,iBAED,MAEH,OAAO,WACLqC,cAAcJ,MAEf,CAACrC,EAAQF,IAEL,qBAAK4C,UAAU,YAAYC,IAAKzC,K,MC1G1B0C,MAnBf,WACE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAArB,SAEE,cAAC,IAAD,CAAUC,GAAE,qBAAgBC,mBAE9B,cAAC,IAAD,CAAOH,KAAK,aAAaC,OAAK,EAA9B,SACE,cAAC,IAAD,CAAUC,GAAE,qBAAgBC,mBAE9B,cAAC,IAAD,CAAOH,KAAK,iBAAZ,SACE,cAAC,EAAD,YCnBVI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASqC,eAAe,W","file":"static/js/main.141be86a.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Quill from \"quill\";\nimport { io } from \"socket.io-client\";\n\nimport \"quill/dist/quill.snow.css\";\n\nconst toolbarOptions = [\n  [{ header: [1, 2, 3, 4, 5, 6, false] }],\n  [{ size: [\"small\", false, \"large\", \"huge\"] }], // custom dropdown\n\n  [\"bold\", \"italic\", \"underline\", \"strike\"], // toggled buttons\n  [{ list: \"ordered\" }, { list: \"bullet\" }],\n  [{ direction: \"rtl\" }], // text direction\n\n  [{ color: [] }, { background: [] }], // dropdown with defaults from theme\n  [{ font: [] }],\n  [{ align: [] }],\n\n  [\"image\", \"blockquote\", \"code-block\"],\n  [\"clean\"] // remove formatting button\n];\n\nconst TextEditor = () => {\n  const [quill, setQuill] = useState(null);\n  const [socket, setSocket] = useState(null);\n  const wrapper = useRef();\n  // getting the ID of the document from the route params\n  const { id: documentId } = useParams();\n  /* \n    this function will check if there are changes on the editor and if the changes are made by the current user,\n    then send those changes to the server via the socket\n    */\n  const sendUserChangesToServer = (delta, oldDelta, source) => {\n    /* \n        API changes means that the server sent some changes to the client. This happens when someone else is typing\n        something on the same editor instance. Since this function is for sending current user's changes back to the\n        server, we will ignore this event.\n    */\n    if (source === \"api\") return;\n\n    // if the user itself made changes on the editor, send the changes to the server via socket event\n    socket.emit(\"send-change\", delta);\n  };\n\n  // everytime we receive some changes by other users, update the contents of the editor\n  const updateEditor = delta => {\n    quill.updateContents(delta);\n  };\n\n  const loadDocumentFromUser = document => {\n    quill.setContents(document);\n    quill.enable();\n  };\n\n  // this useEffect will run once on mount only\n  useEffect(() => {\n    // creates an editor containersdsa for placing the quil editor inside including the toolbar\n    const editor = document.createElement(\"div\");\n    wrapper.current.append(editor);\n\n    const q = new Quill(editor, {\n      theme: \"snow\",\n      modules: {\n        toolbar: toolbarOptions\n      }\n    });\n    // disable the editor when created. we are enabling it later when we get some content to load from the server\n    q.disable();\n    // editor placeholder text\n    q.setText(\"Loading document...\");\n    // set quill instance to the local state\n    setQuill(q);\n\n    // connecting to socket from the server\n    // const sock = io(\"http://localhost:5000\");\n    const sock = io(\"https://google-docs-plus-api.herokuapp.com/\");\n    // setting the socket to the local state\n    setSocket(sock);\n\n    // before unmount\n    return () => {\n      // remove the quill editor\n      wrapper.current.innerHTML = \"\";\n      // disconnect from the socket\n      sock.disconnect();\n    };\n  }, []);\n\n  useEffect(\n    () => {\n      // if quill or the socket is not present on mount, just return\n      if (quill === null || socket === null) return;\n\n      // if user changes something on the editor, send it to the server\n      quill.on(\"text-change\", sendUserChangesToServer);\n\n      // if some other user has made changes to the editor, update the current editor with the changes\n      socket.on(\"receive-changes\", updateEditor);\n\n      // remove the event handler on unmount\n      return () => {\n        quill.off(\"text-change\", sendUserChangesToServer);\n        socket.off(\"receive-changes\", updateEditor);\n      };\n    },\n    // whenever the socket or the quill itself changes\n    [socket, quill]\n  );\n\n  useEffect(() => {\n    // if we don't have socket or the quill, don't proceed\n    if (socket === null || quill === null) return;\n\n    // sends the documentID to the server\n    socket.emit(\"get-document\", documentId);\n\n    // 'once' will ensure that the handler runs once and then gets garbage collected\n    // this will run once to load the document from the server\n    socket.once(\"load-document\", loadDocumentFromUser);\n  }, [socket, quill, documentId]);\n\n  // this useEffect is used to save the document every 2.5 seconds\n  useEffect(() => {\n    let interval = setInterval(() => {\n      socket.emit(\"save-document\", {\n        data: quill.getContents(),\n        documentId\n      });\n    }, 2500);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [socket, quill]);\n\n  return <div className='container' ref={wrapper}></div>;\n};\n\nexport default TextEditor;\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport { v4 as uuid } from \"uuid\";\nimport TextEditor from \"./components/TextEditor.jsx\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact>\n          {/* when user comes to the homepage, redirect them to a new document with a random ID */}\n          <Redirect to={`/documents/${uuid()}`} />\n        </Route>\n        <Route path='/documents' exact>\n          <Redirect to={`/documents/${uuid()}`} />\n        </Route>\n        <Route path='/documents/:id'>\n          <TextEditor />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}